// controllers/inviteController.js
import { prisma } from "../lib/prisma.js";

import jwt from "jsonwebtoken";

/**
 * –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —ñ–Ω–≤–∞–π—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑–∞ email
 */
export const sendInvite = async (req, res) => {
  try {
    const { tripId } = req.params;
    const { email } = req.body;

    // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (Owner)
    const senderId = req.user.id;

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–¥–æ—Ä–æ–∂
    const trip = await prisma.trip.findUnique({
      where: { id: Number(tripId) },
    });

    if (!trip) return res.status(404).json({ message: "Trip not found" });

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ Owner
    if (trip.ownerId !== senderId)
      return res.status(403).json({ message: "Only the owner can send invites" });

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ ‚Äî –Ω–µ –∑–∞–ø—Ä–æ—à—É–≤–∞—Ç–∏ —Å–µ–±–µ
    const user = await prisma.user.findUnique({ where: { email } });
    if (user && user.id === senderId)
      return res.status(400).json({ message: "You cannot invite yourself" });

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–∏–π —ñ–Ω–≤–∞–π—Ç
    const existing = await prisma.invite.findFirst({
      where: {
        tripId: trip.id,
        email,
        status: "PENDING",
      },
    });

    if (existing)
      return res.status(400).json({ message: "Invite already sent to this email" });

    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–æ–∫–µ–Ω –¥–ª—è —ñ–Ω–≤–∞–π—Ç—É (–º–æ–∂–Ω–∞ –ø–æ—Ç—ñ–º –¥–æ–¥–∞—Ç–∏ expiry)
    const token = jwt.sign(
      { tripId: trip.id, email },
      process.env.JWT_SECRET,
      { expiresIn: "24h" }
    );

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω–≤–∞–π—Ç
    const invite = await prisma.invite.create({
      data: {
        email,
        tripId: trip.id,
        token,
      },
    });

    // (–ó–∞–º—ñ—Å—Ç—å —Ä–µ–∞–ª—å–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email –ø—Ä–æ—Å—Ç–æ –ª–æ–≥)
    console.log(`üìß Invite link: http://localhost:5000/api/invites/accept/${token}`);

    res.json({ message: "Invite sent successfully", invite });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Server error" });
  }
};

/**
 * –ü—Ä–∏–π–Ω—è—Ç–∏ —ñ–Ω–≤–∞–π—Ç
 */
export const acceptInvite = async (req, res) => {
  try {
    const { token } = req.params;

    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const { tripId, email } = decoded;

    const invite = await prisma.invite.findFirst({
      where: { tripId, email, token, status: "PENDING" },
    });

    if (!invite) return res.status(404).json({ message: "Invite not found or expired" });

    const user = await prisma.user.findUnique({ where: { email } });

    if (!user)
      return res.status(404).json({ message: "User not found. Register first!" });

    // –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫ Collaborator
    await prisma.trip.update({
      where: { id: tripId },
      data: {
        collaborators: {
          connect: { id: user.id },
        },
      },
    });

    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —ñ–Ω–≤–∞–π—Ç—É
    await prisma.invite.update({
      where: { id: invite.id },
      data: { status: "ACCEPTED" },
    });

    res.json({ message: "Invite accepted successfully" });
  } catch (error) {
    console.error(error);
    res.status(400).json({ message: "Invalid or expired token" });
  }
};
