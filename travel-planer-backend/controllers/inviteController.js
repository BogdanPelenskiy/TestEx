import prisma from "../lib/prisma.js";
import crypto from "crypto";

export const sendInvite = async (req, res) => {
  try {
    const { tripId, email } = req.body;

    if (!tripId || !email) {
      return res.status(400).json({ message: "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ tripId —Ç–∞ email" });
    }

    const trip = await prisma.trip.findUnique({
      where: { id: tripId },
    });

    if (!trip) {
      return res.status(404).json({ message: "–ü–æ–¥–æ—Ä–æ–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞" });
    }

    const token = crypto.randomBytes(16).toString("hex");
    const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000);

    const invite = await prisma.invite.create({
      data: {
        tripId,
        email,
        token,
        expiresAt,
      },
    });

    console.log(`üì® Mock: –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –Ω–∞ ${email} ‚Üí –ø–æ–¥–æ—Ä–æ–∂ "${trip.title}"`);

    res.json({ message: "‚úÖ –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ (mock)", invite });
  } catch (error) {
    console.error("‚ùå sendInvite error:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è" });
  }
};
