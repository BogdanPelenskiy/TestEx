// controllers/inviteController.js
import prisma from "../lib/prisma.js";
// import nodemailer from "nodemailer"; // ‚ùå —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ

export const sendInvite = async (req, res) => {
  try {
    const { tripId, email } = req.body;

    if (!tripId || !email) {
      return res.status(400).json({ message: "tripId —Ç–∞ email –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ" });
    }

    // –ó–Ω–∞–π—Ç–∏ –ø–æ–¥–æ—Ä–æ–∂
    const trip = await prisma.trip.findUnique({ where: { id: Number(tripId) } });
    if (!trip) return res.status(404).json({ message: "–ü–æ–¥–æ—Ä–æ–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞" });

    // –°—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–Ω–≤–∞–π—Ç —É –ë–î
    const invite = await prisma.invite.create({
      data: { tripId: Number(tripId), email },
    });

    // üß© –ú–æ–∫ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ (–∑–∞–º—ñ—Å—Ç—å —Ä–µ–∞–ª—å–Ω–æ–≥–æ nodemailer)
    console.log(`üì® [MOCK] –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ ${email} –¥–ª—è –ø–æ–¥–æ—Ä–æ–∂—ñ "${trip.title}"`);

    // –Ü–º—ñ—Ç–∞—Ü—ñ—è –∑–∞—Ç—Ä–∏–º–∫–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
    await new Promise((resolve) => setTimeout(resolve, 500));

    // –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ —É—Å–ø—ñ—Ö
    res.json({ message: "–ú–æ–∫-–∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!", invite });
  } catch (error) {
    console.error("‚ùå sendInvite error:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –º–æ–∫-–≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è", error: error.message });
  }
};
