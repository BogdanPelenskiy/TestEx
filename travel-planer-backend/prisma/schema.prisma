generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  password       String
  name           String?
  role           Role     @default(USER)
  tripsOwned     Trip[]   @relation("UserTripsOwned")
  collaborations Trip[]   @relation("TripCollaborators")
  invites        Invite[] @relation("UserInvites")
  createdAt      DateTime @default(now())
}

model Trip {
  id            String    @id @default(uuid())
  title         String
  description   String?
  startDate     DateTime
  endDate       DateTime
  ownerId       String
  owner         User      @relation("UserTripsOwned", fields: [ownerId], references: [id], onDelete: Cascade)
  collaborators User[]    @relation("TripCollaborators")
  places        Place[]
  invites       Invite[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Place {
  id           String   @id @default(uuid())
  tripId       String
  trip         Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  locationName String
  notes        String?
  dayNumber    Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Invite {
  id        Int      @id @default(autoincrement())
  tripId    String
  userId    String? // користувач, якого запросили (може бути null, якщо ще не зареєстрований)
  email     String
  token     String
  status    String   @default("pending")
  expiresAt DateTime
  createdAt DateTime @default(now())

  Trip Trip  @relation(fields: [tripId], references: [id], onDelete: Cascade)
  User User? @relation("UserInvites", fields: [userId], references: [id])
}

enum Role {
  USER
  OWNER
  COLLABORATOR
}
