import { useState, useEffect } from "react";
import { createTrip, getTrips, deleteTrip } from "../services/tripService";
import { sendInvite } from "../services/inviteService";
import { useNavigate } from "react-router-dom";

export default function TripsPage() {
  const [trips, setTrips] = useState([]);
  const [title, setTitle] = useState("");
  const [description, setDescription] = useState("");
  const [inviteEmail, setInviteEmail] = useState({});
  const [loading, setLoading] = useState(false);
  const [userName, setUserName] = useState("");
  const navigate = useNavigate();

  useEffect(() => {
    const storedName = localStorage.getItem("userName");
    if (storedName) setUserName(storedName);
    fetchTrips();
  }, []);

  const fetchTrips = async () => {
    try {
      const data = await getTrips();
      setTrips(data);
    } catch (error) {
      console.error("‚ùå fetchTrips error:", error);
    }
  };

  const handleCreateTrip = async () => {
    if (!title.trim()) return alert("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø–æ–¥–æ—Ä–æ–∂—ñ");
    setLoading(true);
    try {
      const newTrip = await createTrip({ title, description });
      setTrips([...trips, newTrip]);
      setTitle("");
      setDescription("");
    } catch (error) {
      console.error("‚ùå handleCreateTrip error:", error);
    } finally {
      setLoading(false);
    }
  };

  const handleInvite = async (tripId) => {
    if (!inviteEmail[tripId]?.trim()) return alert("–í–≤–µ–¥—ñ—Ç—å email –¥—Ä—É–≥–∞!");
    try {
      await sendInvite({ tripId, email: inviteEmail[tripId] });
      alert(`‚úÖ –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ ${inviteEmail[tripId]}`);
      setInviteEmail((prev) => ({ ...prev, [tripId]: "" }));
    } catch (error) {
      console.error("‚ùå handleInvite error:", error);
      alert("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è");
    }
  };

  const handleDeleteTrip = async (tripId) => {
    if (!window.confirm("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–¥–æ—Ä–æ–∂?")) return;
    try {
      await deleteTrip(tripId);
      setTrips(trips.filter((t) => t.id !== tripId));
    } catch (error) {
      console.error("‚ùå handleDeleteTrip error:", error);
      alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–¥–æ—Ä–æ–∂");
    }
  };

  const handleLogout = () => {
    localStorage.removeItem("token");
    localStorage.removeItem("userName");
    navigate("/login");
  };

  return (
    <div className="min-h-screen bg-gray-100 flex flex-col">

      {/* üîπ –í–µ—Ä—Ö–Ω—è –ø–∞–Ω–µ–ª—å */}
      <header className="bg-blue-600 text-white flex justify-between items-center px-6 py-4 shadow-md">
        <div className="flex items-center gap-3">
          <img
            src="https://cdn-icons-png.flaticon.com/512/3448/3448629.png"
            alt="logo"
            className="w-8 h-8"
          />
          <h1 className="text-lg font-semibold">Travel Planner</h1>
        </div>
        <div className="flex items-center gap-4">
          <span className="text-sm font-medium">üëã {userName || "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"}</span>
          <button
            onClick={handleLogout}
            className="bg-white text-blue-600 font-semibold px-3 py-1 rounded-lg hover:bg-gray-100 transition"
          >
            –í–∏–π—Ç–∏
          </button>
        </div>
      </header>

      {/* üîπ –û—Å–Ω–æ–≤–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ */}
      <main className="flex flex-col items-center p-6 flex-1">
        <h1 className="text-3xl font-bold mb-6 text-center">–ú–æ—ó –ø–æ–¥–æ—Ä–æ–∂—ñ</h1>

        {/* –ë–ª–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è */}
        <div className="bg-white p-6 rounded-2xl shadow-md w-full max-w-lg mb-8">
          <input
            type="text"
            placeholder="–ù–∞–∑–≤–∞ –ø–æ–¥–æ—Ä–æ–∂—ñ"
            className="border rounded-lg w-full p-3 mb-3 focus:outline-none focus:ring focus:ring-blue-300"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
          />
          <textarea
            placeholder="–û–ø–∏—Å (–Ω–µ–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ)"
            className="border rounded-lg w-full p-3 mb-4 focus:outline-none focus:ring focus:ring-blue-300"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
          />
          <button
            onClick={handleCreateTrip}
            disabled={loading}
            className={`w-full py-3 text-white font-semibold rounded-lg ${
              loading ? "bg-gray-400" : "bg-blue-600 hover:bg-blue-700"
            } transition`}
          >
            {loading ? "–°—Ç–≤–æ—Ä—é—î—Ç—å—Å—è..." : "–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–¥–æ—Ä–æ–∂"}
          </button>
        </div>

        {/* –°–ø–∏—Å–æ–∫ –ø–æ–¥–æ—Ä–æ–∂–µ–π */}
        <div className="w-full max-w-2xl">
          {trips.length === 0 ? (
            <p className="text-gray-600 text-center">
              –ü–æ–∫–∏ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ—ó –ø–æ–¥–æ—Ä–æ–∂—ñ. –°—Ç–≤–æ—Ä–∏ –ø–µ—Ä—à—É –≤–∏—â–µ üëÜ
            </p>
          ) : (
            <div className="grid gap-4">
              {trips.map((trip) => (
                <div
                  key={trip.id}
                  className="bg-white p-5 rounded-2xl shadow-md border border-gray-200"
                >
                  <div className="flex justify-between items-start">
                    <div>
                      <h2 className="text-xl font-semibold text-gray-800">{trip.title}</h2>
                      <p className="text-gray-600 mb-4">{trip.description || "–ë–µ–∑ –æ–ø–∏—Å—É"}</p>
                    </div>
                    <button
                      onClick={() => handleDeleteTrip(trip.id)}
                      className="text-red-500 hover:text-red-700 font-semibold"
                    >
                      ‚úñ
                    </button>
                  </div>

                  {/* –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è */}
                  <div className="flex gap-2 items-center">
                    <input
                      type="email"
                      placeholder="Email –¥—Ä—É–≥–∞"
                      className="border rounded-lg p-2 flex-1 focus:outline-none focus:ring focus:ring-blue-200"
                      value={inviteEmail[trip.id] || ""}
                      onChange={(e) =>
                        setInviteEmail((prev) => ({
                          ...prev,
                          [trip.id]: e.target.value,
                        }))
                      }
                    />
                    <button
                      onClick={() => handleInvite(trip.id)}
                      className="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg transition"
                    >
                      –ó–∞–ø—Ä–æ—Å–∏—Ç–∏
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </main>
    </div>
  );
}
